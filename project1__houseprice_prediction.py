# -*- coding: utf-8 -*-
"""project1 _houseprice_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tb-C2d4-qQq-JtG4fapSDGDhdQnoYGhM
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRFRegressor
from sklearn import metrics

"""importing the boston house price dataset"""

fetch_california_housing=sklearn.datasets.fetch_california_housing()

print(fetch_california_housing)

#loading the dataset to a pandas dataframes
house_price_dataframe =pd.DataFrame(fetch_california_housing.data,columns = fetch_california_housing.feature_names)

#print first five rows for dataframe
house_price_dataframe.head()

# add the target column to the dataframe
house_price_dataframe['price'] = fetch_california_housing.target

house_price_dataframe.head()

#checking the number of rows and columns in data frames
house_price_dataframe.shape

#check for missing valuse
house_price_dataframe.isnull().sum()

#statistical measures of the dataset
house_price_dataframe.describe()

"""understanding the corelationbetween various features in the data
1 - positive correlation
2 - negative correlation
"""

correlation = house_price_dataframe.corr()

# constructing a heatmap to understand the correlation
plt.figure(figsize =(10,10))
sns.heatmap(correlation, cbar =True, square=True, fmt='.1f',annot =True, annot_kws={'size':8},cmap='Blues')

x =house_price_dataframe.drop(['price'],axis=1)
y= house_price_dataframe['price']

print(x)
print(y)

"""splitting the data into training data and test data"""

x_train, x_test, y_train, y_test =train_test_split(x,y, test_size=0.2,random_state =2)

print(x.shape,x_train.shape,x_test.shape)

"""model training xgboost modles"""

#loading the model
model = XGBRFRegressor()

#training the model with x_train
model.fit(x_train ,y_train)

"""prediction on training data"""

#accuracy for prediction on training data
training_data_prediction=model.predict(x_train)

print(training_data_prediction)

#R squared error
score_1 = metrics.r2_score(y_train,training_data_prediction)
# mean absolute error
score_2=metrics.mean_absolute_error(y_train, training_data_prediction)

print("r Squared error :",score_1)
print('mean absolute error:',score_2)

"""Visualization the actual prices and predicted prices"""

plt.scatter(y_train , training_data_prediction)
plt.xlabel("Actual prices")
plt.ylabel("predicted prices")
plt.title("Actual prices vs Predicted Price")

"""prediction on text data"""

test_data_prediction = model.predict(x_test)

#R squared error
score_1 = metrics.r2_score(y_test,test_data_prediction)
# mean absolute error
score_2=metrics.mean_absolute_error(y_test, test_data_prediction)

print("r Squared error :",score_1)
print('mean absolute error:',score_2)

